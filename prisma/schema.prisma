// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  biography     String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  tweets        Tweet[]   @relation("authorRelation")
  retweets      Retweet[]
  likes         Tweet[]
  followedBy    User[]    @relation("UserFollows")
  following     User[]    @relation("UserFollows")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Tweet {
  id                String    @id @default(cuid())
  message           String
  author            User      @relation(fields: [authorId], references: [id], "authorRelation")
  authorId          String
  rootTweet         Tweet?    @relation(fields: [rootTweetId], references: [id], "rootTweetRelation")
  rootTweetId       String?
  comments          Tweet[]   @relation("commentsRelation")
  commentsRelation  Tweet[]   @relation("commentsRelation")
  retweets          Retweet[]
  likes             User[]
  rootTweetRelation Tweet[]   @relation("rootTweetRelation")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Retweet {
  id        String   @id @default(cuid())
  tweet     Tweet    @relation(fields: [tweetId], references: [id])
  tweetId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
